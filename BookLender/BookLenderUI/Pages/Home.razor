@page "/"

@using BookLenderUI.Services.Interfaces
@using BookLender.Shared.Models

@inject ILoanService LoanServive
@inject IBookReaderService BookReaderService
@inject IBookService BookService


<PageTitle>Home</PageTitle>

<h3>Late Rents</h3>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <table class="table table-striped">
                <thead class="text-center bg-danger">
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Reader</th>
                        <th scope="col">Book</th>
                        <th scope="col">Manage Rent</th>
                    </tr>
                </thead>

                <tbody>
                    @if (_detailedLateLoans == null)
                    {
                        <tr>
                            <td colspan="4" class="text-center">Loading...</td>
                        </tr>
                    }
                    else if (!_detailedLateLoans.Any())
                    {
                        <tr>
                            <td colspan="4" class="text-center">No loans are late.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var loan in _detailedLateLoans)
                        {
                            <tr class="table-danger text-center">
                                <td>@loan.LoanId</td>
                                <td>@loan.ReaderName</td>
                                <td>@loan.BookTitle</td>
                                <td><a href="/loan/@loan.BookId/@loan.ReaderId" class="btn btn-outline-info">Manage</a></td>
                            </tr>
                        }
                    }
                </tbody>

            </table>
        </div>
    </div>
</div>

<h3>Due Soon Rents</h3>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <table class="table table-striped">
                <thead class="text-center bg-warning">
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Reader</th>
                        <th scope="col">Book</th>
                        <th scope="col">Manage Rent</th>
                    </tr>
                </thead>

                <tbody>
                    @if (_detailedDueSoonLoans == null)
                    {
                        <tr>
                            <td colspan="4" class="text-center">Loading...</td>
                        </tr>
                    }
                    else if (!_detailedDueSoonLoans.Any())
                    {
                        <tr>
                            <td colspan="4" class="text-center">No loans are late.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var loan in _detailedDueSoonLoans)
                        {
                            <tr class="table-warning text-center">
                                <td>@loan.LoanId</td>
                                <td>@loan.ReaderName</td>
                                <td>@loan.BookTitle</td>
                                <td><a href="/loan/@loan.BookId/@loan.ReaderId" class="btn btn-outline-info">Manage</a></td>
                            </tr>
                        }
                    }
                </tbody>

            </table>
        </div>
    </div>
</div>

@code {
    private IEnumerable<dynamic> _detailedLateLoans;

    private IEnumerable<dynamic> _detailedDueSoonLoans;

	protected override async Task OnInitializedAsync()
	{
		var dueSoonLoans = await LoanServive.GetDueSoonLoans();
		var lateLoans = await LoanServive.GetLateLoans();

        _detailedLateLoans = await Task.WhenAll(lateLoans.Select(async loan => new
        {
            LoanId = loan.LoanId,
            ReaderName = (await BookReaderService.GetReaderAsync(loan.ReaderId)).Name,
            BookTitle = (await BookService.GetBookAsync(loan.BookId)).Title,
            ReaderId = loan.ReaderId,
            BookId = loan.BookId
        }));

        _detailedDueSoonLoans = await Task.WhenAll(dueSoonLoans.Select(async loan => new
        {
            LoanId = loan.LoanId,
            ReaderName = (await BookReaderService.GetReaderAsync(loan.ReaderId)).Name,
            BookTitle = (await BookService.GetBookAsync(loan.BookId)).Title,
            ReaderId = loan.ReaderId,
            BookId = loan.BookId
        }));
	}
}