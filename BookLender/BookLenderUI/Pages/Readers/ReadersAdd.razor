@page "/readers/add"

@using BookLender.Shared.Models;
@using BookLenderUI.Services.Interfaces
@using BookLenderUI.Components
@using System

@inject NavigationManager NavigationManager
@inject IBookReaderService BookReaderService

<h3>Add New Reader</h3>

@if (_errorMessage is not null)
{
	<div class="alert alert-danger" role="alert">
		@_errorMessage
	</div>
}

<BookReaderForm BookReader="_newBookReader" OnValidSubmit="AddAsync" ButtonText="Add To Inventory" />

@code {
	private string _errorMessage { get; set; }

	private BookReader _newBookReader = new()
	{
		BirthDate = new DateTime(2000, 1, 1)
	};

	private async Task AddAsync()
	{
		try 
		{
			await BookReaderService.AddReaderAsync(_newBookReader);
			NavigationManager.NavigateTo("readers");
		}
		catch (Exception e)
		{
			_errorMessage = e.Message;
			StateHasChanged();
			_ = ClearErrorMessageAfterDelay();
		}
	}

	private async Task ClearErrorMessageAfterDelay()
	{
		await Task.Delay(6000);
		_errorMessage = null;
		StateHasChanged();
	}
}
