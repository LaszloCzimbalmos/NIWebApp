@page "/reader/{id:int}"

@using BookLender.Shared.Models;
@using BookLenderUI.Services.Interfaces
@using BookLenderUI.Components

@inject NavigationManager NavigationManager
@inject IBookReaderService BookReaderService

<h3>ReaderDetails</h3>

@if (_errorMessage is not null)
{
	<div class="alert alert-danger" role="alert">
		@_errorMessage
	</div>
}

@if (_bookReader is not null)
{

	<BookReaderForm BookReader="_bookReader" OnValidSubmit="UpdateAsync" ButtonText="Update Reader Data"/>

	<button class="btn btn-danger form-control mt-3" @onclick="() => DeleteAsync()">Delete</button>
}
else
{
	<div class="spinner-border" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}

@code {
	private string _errorMessage { get; set; }
	private BookReader _bookReader;

	[Parameter]
	public int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		_bookReader = await BookReaderService.GetReaderAsync(Id);
	}

	private async Task ClearErrorMessageAfterDelay()
	{
		await Task.Delay(6000);
		_errorMessage = null;
		StateHasChanged();
	}

	private async Task UpdateAsync()
	{
		await BookReaderService.UpdateReaderAsync(_bookReader);
		NavigationManager.NavigateTo("readers");
	}

	private async Task DeleteAsync()
	{
		try
		{
			await BookReaderService.DeleteReaderAsync(Id);
			NavigationManager.NavigateTo("readers");
		}
		catch (Exception e)
		{
			_errorMessage = e.Message;
			StateHasChanged();
			_ = ClearErrorMessageAfterDelay();
		}
	}
	
}
