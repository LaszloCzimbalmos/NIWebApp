@page "/readers"
@using BookLender.Shared.Models;
@using BookLenderUI.Services.Interfaces
@inject IBookReaderService BookReaderSercive

<div class="d-flex align-items-center gap-4">
    <h3 class="fw-bold">Reader Inventory</h3>

    <a href="readers/add" class="btn btn-outline-warning fw-bold border-2">Add Reader</a>

    <nav class="navbar navbar-light bg-light" style="margin-left: 500px">
        <form class="form-inline d-flex" @onsubmit="SearchReader">
            <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search" @bind="_searchedName">
            <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
        </form>
    </nav>
</div>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Name</th>
                        <th scope="col">Address</th>
                        <th scope="col">Date of Birth</th>
                        <th scope="col">Details</th>
                        <th scope="col">Rented Books</th>
                    </tr>
                </thead>
                <tbody>
                    @if (_bookReaders == null)
                    {
                        <tr>
                            <td colspan="6" class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </td>
                        </tr>
                    }
                    else if (!_bookReaders.Any())
                    {
                        <tr>
                            <td colspan="6" class="text-center">No readers found.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var reader in _bookReaders)
                        {
                            <tr class="align-middle">
                                <td><span class="badge bg-secondary">@reader.ReaderId</span></td>
                                <td><span role="button" onclick="copyToClipboard(this)">@reader.Name</span></td>
                                <td>@reader.Address</td>
                                <td>@reader.BirthDate.ToShortDateString()</td>
                                <td><a href="/reader/@reader.ReaderId" class="btn btn-outline-info">View</a></td>
                                <td><a href="/loans/@reader.Name" class="ms-4 btn btn-outline-dark">List</a></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <script>
        function copyToClipboard(element) {
            const textToCopy = element.innerText;

            navigator.clipboard.writeText(textToCopy).then(() => {
                element.classList.add("badge", "bg-success", "text-white");
                setTimeout(() => element.classList.remove("badge", "bg-success", "text-white"), 500);
            }).catch(err => {
                console.error("Failed to copy text: ", err);
            });
        }
    </script>

</div>

@code {
    private List<BookReader> _bookReaders;
    private string _searchedName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _bookReaders = await BookReaderSercive.GetAllAsync();
    }

    private async Task SearchReader()
    {
        if (!string.IsNullOrWhiteSpace(_searchedName))
        {
            _bookReaders = await BookReaderSercive.GetSearchedReadersAsync(_searchedName);
        }
        else
        {
            _bookReaders = await BookReaderSercive.GetAllAsync();
        }

        StateHasChanged();
    }
}
