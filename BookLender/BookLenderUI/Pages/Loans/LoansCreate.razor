@page "/loans/create-loan/{bookId:int}"

@using BookLender.Shared.Dto
@using BookLenderUI.Services.Interfaces
@using BookLenderUI.Components
@using BookLender.Shared.Models

@inject NavigationManager NavigationManager
@inject IBookService BookService
@inject ILoanService LoanService

@if (_errorMessage is not null)
{
	<div class="alert alert-danger" role="alert">
		@_errorMessage
	</div>
}

@if (_book is not null)
{
	<h3>Rent Out @_book.Title</h3>

	<LoanForm LoanDto="_loan" OnValidSubmit="CreateAsync" ButtonText="Rent Out" />
}
else
{
	<p>Loading...</p>
}

@code {
	private string _errorMessage { get; set; }
	private Book _book;
	private LoanDto _loan;

	[Parameter]
	public int BookId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_book = await BookService.GetBookAsync(BookId);
			_loan = new LoanDto()
				{
					BookTitle = _book.Title,
				};
		}
		catch (Exception e)
		{
			_errorMessage = e.Message;
			StateHasChanged();
			_ = ClearErrorMessageAfterDelay();
		}

	}

	public async Task CreateAsync()
	{
		try
		{
			await LoanService.CreateLoanAsync(_loan);
			NavigationManager.NavigateTo($"/loans/{_loan.ReaderName}");
		}
		catch (Exception e)
		{
			_errorMessage = e.Message;
			StateHasChanged();
			_ = ClearErrorMessageAfterDelay();
		}
	}

	private async Task ClearErrorMessageAfterDelay()
	{
		await Task.Delay(6000);
		_errorMessage = null;
		StateHasChanged();
	}
}